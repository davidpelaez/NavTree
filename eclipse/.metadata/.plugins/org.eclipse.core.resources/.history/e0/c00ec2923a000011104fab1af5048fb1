package navtree;

import java.io.*;
import processing.core.*;
import org.json.*;

public class Navtree {

	public java.util.HashMap<Integer, Node> nodeTable;
	public Node[] nodes = new Node[100];
	public Edge[] edges = new Edge[500];
	public int nodeCount = 0, edgeCount = 0;
	public PApplet applet;
	public boolean update = true;// Define if continue updating the tree or only
									// drawing it.
	
	public int maxDate, minDate,dateDelta; //This is to find what span of time's being graphed

	Navtree(PApplet _applet) {
		applet = _applet;
		nodeTable = new java.util.HashMap<Integer, Node>();
		String[] myJsonStrings = loadFile("myNavtree.json");
		System.out.println("JSon lines loaded = " + myJsonStrings.length);
		String jsonLine;
		JSONObject jsonData;
		JSONNodeReader jNode;
		for (int i = 0; i < myJsonStrings.length; i++) {
			jsonLine = myJsonStrings[i];
			try {
				jsonData = new JSONObject(jsonLine);
				jNode = new JSONNodeReader(jsonData);
				addNode(jNode);
				if(i == 0){
					minDate = jNode.unixDate;
					maxDate = jNode.unixDate;
				}
			} catch (JSONException e) {
				System.out.println("There was an error parsing the JSONObject.");
				System.out.println(e);
			}
		} // Line read ends. All nodes in memory
		dateDelta = (maxDate-minDate);
		// Point all edges to its nodes and all nodes to its parent node.
		shrinkArrays();
		for(Node node : nodes) node.pointToParent(); 
		nodes = java.util.Arrays.sort(nodes, 0, nodeCount);
		for (int i = 0; i < nodeCount; i++) {
			nodes[i].pointToParent();
		}
		for (int i = 0; i < edgeCount; i++) {
			edges[i].pointToNodes();
		}
		System.out.println("NodeCount = " + nodeCount);
		System.out.println("EdgeCount = " + edgeCount);
		System.out.println("maxDate = " + maxDate);
		System.out.println("minDate = " + minDate);
	}// Constructor ends

	protected void shrinkArrays() {

	}

	protected void addEdge(int fromId, int toParentId) {
		Edge e = new Edge(this, fromId, toParentId);
		if (edgeCount == edges.length) {
			edges = (Edge[]) PApplet.expand(edges);
		}
		edges[edgeCount++] = e;
	}

	protected void addNode(JSONNodeReader jNode) {		
		//Manage dates
		if(minDate > jNode.unixDate){
			minDate = jNode.unixDate;
		}
		if(minDate < jNode.unixDate){
			maxDate = jNode.unixDate;			
		}
		//Add node
		Node node = new Node(this, jNode);
		if (nodeCount == nodes.length) {
			nodes = (Node[]) PApplet.expand(nodes);
		}
		nodeTable.put(node.id, node);
		if (!node.isRoot()) {
			addEdge(node.id, node.parentId);
		}
		nodes[nodeCount++] = node;
	}

	// TODO: Modify the behaviour because all nodes will be added when find is
	// to be used

	public Node findNode(int id) {
		Node n = (Node) nodeTable.get(id);
		if (n == null) {
			throw new RuntimeException("The requested node isn't registered. Possible bug or Json Navtree integrity error.");
		}
		return n;
	}

	/*
	 * Load file and return it as an array of strings
	 */
	protected String[] loadFile(String path) {
		java.util.ArrayList<String> fileLines = new java.util.ArrayList<String>();
		String[] lines = null;
		try {
			// Open the file that is the first
			// command line parameter
			FileInputStream fstream = new FileInputStream(path);
			// Get the object of DataInputStream
			DataInputStream in = new DataInputStream(fstream);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			String strLine;
			// Read File Line By Line
			while ((strLine = br.readLine()) != null) {
				// Print the content on the console
				fileLines.add(strLine);
			}
			// Close the input stream
			in.close();
			lines = fileLines.toArray(new String[1]);
		} catch (Exception e) {// Catch exception if any
			System.err.println("Error: " + e.getMessage());
		}
		return lines;
	}

	public void draw() {
		if (update) {
			for (int i = 0; i < edgeCount; i++) {
				edges[i].relax();
			}
			for (int i = 0; i < nodeCount; i++) {
				nodes[i].relax();
			}
			for (int i = 0; i < nodeCount; i++) {
				nodes[i].update();
			}
		}//Update block ends
		for (int i = 0; i < edgeCount; i++) {
			edges[i].draw();
		}
		for (int i = 0; i < nodeCount; i++) {
			nodes[i].draw();
		}
	}

}
